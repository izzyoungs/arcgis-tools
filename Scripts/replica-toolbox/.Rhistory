?tigris::states
test <- tigris::states(cb = TRUE, year = 2023, progress_bar = FALSE)
test |> glimpse()
test
test |> sf::st_crs()
home_locations_tag_field = 'sum_000'
test |> select(home_locations_tag_field)
library(tidyverse)
test |> select(home_locations_tag_field)
sql <- glue_sql("
SELECT pop.person_id, activity_id, distance_miles, mode, travel_purpose, pop.commute_mode, pop.household_size, pop.vehicles, pop.age_group, pop.sex, pop.race, pop.ethnicity, pop.employment, pop.education, start_lat, start_lng, end_lat, end_lng, pop.lat as home_lat, pop.lng as home_lng
FROM `replica-customer.cal_nev.cal_nev_2024_Q2_thursday_trip` as trip
LEFT JOIN `replica-customer.cal_nev.cal_nev_2024_Q2_population` as pop
ON trip.person_id = pop.person_id
WHERE ST_WITHIN(ST_GEOGPOINT(end_lng, end_lat), ST_GEOGFROMTEXT('POLYGON ((-121.9483 38.73459, -121.0096 38.73459, -121.0096 39.63939, -121.9483 39.63939, -121.9483 38.73459))'))
AND ST_WITHIN(ST_GEOGPOINT(lng, lat), ST_GEOGFROMTEXT('POLYGON ((-121.9483 38.73459, -121.0096 38.73459, -121.0096 39.63939, -121.9483 39.63939, -121.9483 38.73459))'))
")
library(glue)
library(sf)
library(bigrquery)
tb <- bq_project_query("replica-customer", sql)|>
suppressMessages() |>
suppressWarnings()
sql <- glue_sql("
SELECT pop.person_id, activity_id, distance_miles, mode, travel_purpose, pop.commute_mode, pop.household_size, pop.vehicles, pop.age_group, pop.sex, pop.race, pop.ethnicity, pop.employment, pop.education, start_lat, start_lng, end_lat, end_lng, pop.lat as home_lat, pop.lng as home_lng
FROM `replica-customer.cal_nev.cal_nev_2024_Q2_thursday_trip` as trip
LEFT JOIN `replica-customer.cal_nev.cal_nev_2024_Q2_population` as pop
ON trip.person_id = pop.person_id
WHERE ST_WITHIN(ST_GEOGPOINT(end_lng, end_lat), ST_GEOGFROMTEXT('POLYGON ((-121.9483 38.73459, -121.0096 38.73459, -121.0096 39.63939, -121.9483 39.63939, -121.9483 38.73459))'))
AND ST_WITHIN(ST_GEOGPOINT(lng, lat), ST_GEOGFROMTEXT('POLYGON ((-121.9483 38.73459, -121.0096 38.73459, -121.0096 39.63939, -121.9483 39.63939, -121.9483 38.73459))'))",
.con = DBI::ANSI())
sql
tb <- bq_project_query("replica-customer", sql)|>
suppressMessages() |>
suppressWarnings()
tb <- bq_project_query("replica-customer", sql)
tb_return <- bq_table_download(tb)
tb_return
tst <- tb_return |>
mutate(n = 1,
n2 = 1,
mode = paste0('mode_', mode),
travel_purpose = paste0('purpose_', travel_purpose)) |>
pivot_wider(names_from = travel_purpose, values_from = n, values_fill = list(value = 0),
values_fn = ~ mean(.x, na.rm = TRUE)) |>
pivot_wider(names_from = mode, values_from = n2, values_fill = list(value = 0),
values_fn = ~ mean(.x, na.rm = TRUE)) |>
mutate_if(is.numeric, ~ ifelse(is.na(.), 0, .))
tst
sf_home_locations <- tst |>
st_as_sf(coords = c("home_lng", "home_lat"), crs = 4326)
sf_home_locations
# Get the block groups for yuba county
test_dest <- tigris::block_groups(state = "CA", county = "Yuba", year = 2023) |>
st_transform(4326) |>
st_make_valid()
# Get the block groups for yuba county
test_dest <- tigris::block_groups(state = "CA", county = "Yuba", year = 2023) |>
st_transform(4326) |>
st_make_valid() |>
slice(1L)
test_dest
sf_home_locations <- tst |>
st_as_sf(coords = c("home_lng", "home_lat"), crs = 4326) |>
st_intersect(test_dest)
sf_home_locations <- tst |>
st_as_sf(coords = c("home_lng", "home_lat"), crs = 4326) |>
st_intersection(test_dest)
sf_home_locations
sf_home_locations <- tst |>
st_as_sf(coords = c("home_lng", "home_lat"), crs = 4326) |>
st_contains(test_dest)
sf_home_locations
?st_join
sf_home_locations <- tst |>
st_as_sf(coords = c("home_lng", "home_lat"), crs = 4326) |>
st_join(test_dest, join = st_intersects, left = TRUE)
sf_home_locations
# Get the block groups for yuba county
test_hl_tags <- tigris::block_groups(state = "CA", county = "Yuba", year = 2023) |>
st_transform(4326) |>
st_make_valid() |>
slice(1L) |>
select(home_location_tag_field = NAME)
# Get the block groups for yuba county
test_hl_tags <- tigris::block_groups(state = "CA", county = "Yuba", year = 2023) |>
st_transform(4326) |>
st_make_valid() |>
slice(1L) |>
select(home_location_tag_field = NAMELSAD)
test_hl_tags
dest_boundary <- tigris::counties(state = "CA", year = 2023) |>
filter(NAME == "Yuba" | name == "Sutter") |>
st_transform(4326) |>
st_make_valid()
dest_boundary
tigris::counties(state = "CA", year = 2023)
dest_boundary <- tigris::counties(state = "CA", year = 2023) |>
filter(NAME == "Yuba" | NAME == "Sutter") |>
st_transform(4326) |>
st_make_valid() |>
summarize()
dest_boundary
sf_home_locations <- tst |>
st_as_sf(coords = c("home_lng", "home_lat"), crs = 4326) |>
st_intersection(home_boundary) |>
st_intersection(dest_boundary) |>
st_join(test_hl_tags, join = st_intersects, left = TRUE)
dest_boundary <- tigris::counties(state = "CA", year = 2023) |>
filter(NAME == "Yuba" | NAME == "Sutter") |>
st_transform(4326) |>
st_make_valid() |>
summarize()
home_boundary <- dest_boundary
# Get the block groups for yuba county
test_hl_tags <- tigris::block_groups(state = "CA", county = "Yuba", year = 2023) |>
st_transform(4326) |>
st_make_valid() |>
slice(1L) |>
select(home_location_tag_field = NAMELSAD)
sf_home_locations <- tst |>
st_as_sf(coords = c("home_lng", "home_lat"), crs = 4326) |>
st_intersection(home_boundary) |>
st_intersection(dest_boundary) |>
st_join(test_hl_tags, join = st_intersects, left = TRUE)
sf_home_locations
mapview::mapview(sf_home_locations)
sf_home_locations |>
st_drop_geometry() |>
st_to_sf(coords = c("end_lng", "end_lat"), crs = 4326)
sf_home_locations |>
st_drop_geometry() |>
st_as_sf(coords = c("end_lng", "end_lat"), crs = 4326)
tst
tb_return
tst |>
st_as_sf(coords = c("home_lng", "home_lat"), crs = 4326) |>
st_intersection(home_boundary) |>
st_drop_geometry()
?st_as_sf
tempdir()
?st_Write
?st_write
temp_file <- paste0(tempdir(), "/network_large.shp")
temp_file
print(temp_file)
test <- 0
print(paste0("Network very large. ", nrow(df_network), " rows in data. May crash tool. Writing to shapefile in temp directory: ", temp_file))
print(paste0("Network very large. ", test, " rows in data. May crash tool. Writing to shapefile in temp directory: ", temp_file))
