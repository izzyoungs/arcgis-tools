county_name = 'Washoe'
fips_for_county <- megaregions_fips |>
filter(state == state_abb, county == county_name)
fips_for_county
county_name = 'Washoe County'
fips_for_county
fips_for_county <- megaregions_fips |>
filter(state == state_abb, county %in% county_name)
fips_for_county
fips_for_county
megaregions_fips |>
filter(state == state_abb, county %in% county_name)
fips_for_county <- megaregions_fips |>
filter(state == state_abb, county %in% county_name)
is.na(fips_for_county$county_code)
is.na(fips_for_county$county_code) == TRUE
fips_for_county$county_code
fips_for_county$state_code
fips_for_county$county_code
megaregion
fips_for_county
fips_for_county
megaregions_fips
fips_for_county <- megaregions_fips |>
filter(state == state_abb, county %in% county_name)
print(fips_for_county)
fips_for_county <- megaregions_fips |>
filter(state %in% state_abb, county %in% county_name)
print(fips_for_county)
megaregions <- data.frame(
Megaregion = c("alaska", "cal_nev", "cal_nev", "great_lakes", "great_lakes",
"great_lakes", "great_lakes", "great_lakes", "great_lakes",
"hawaii", "mid_atlantic", "mid_atlantic", "mid_atlantic",
"mid_atlantic", "mid_atlantic", "north_atlantic", "north_atlantic",
"north_atlantic", "north_atlantic", "north_atlantic", "north_central",
"north_central", "north_central", "north_central", "north_central",
"north_central", "north_central", "northeast", "northeast",
"northeast", "northeast", "northeast", "northwest", "northwest",
"northwest", "northwest", "northwest", "south_atlantic",
"south_atlantic", "south_atlantic", "south_central", "south_central",
"south_central", "south_central", "south_central", "southwest",
"southwest", "southwest", "southwest", "southwest", "southwest"),
STUSPS = c("AK", "CA", "NV", "IL", "IN", "KY", "MI", "OH", "WI", "HI", "DC",
"MD", "NC", "VA", "WV", "CT", "DE", "NJ", "NY", "PA", "IA", "KS",
"MN", "MO", "ND", "NE", "SD", "MA", "ME", "NH", "RI", "VT", "ID",
"MT", "OR", "WA", "WY", "FL", "GA", "SC", "AL", "AR", "LA", "MS",
"TN", "AZ", "CO", "NM", "OK", "TX", "UT")
)
megaregions_fips <- left_join(tigris::fips_codes, megaregions, by = c("state" = "STUSPS"))
megaregions_fips
fips_for_county <- megaregions_fips |>
filter(state %in% state_abb, county %in% county_name)
print(fips_for_county)
fips_for_county <- megaregions_fips |>
filter(state %in% state_abb) |>
filter(county_name %in% county_name)
fips_for_county
county_name
fips_for_county <- megaregions_fips |>
filter(state %in% state_abb) |>
filter(county_name %in% county_name)
fips_for_county
fips_for_county <- megaregions_fips |>
filter(state %in% state_abb) |>
filter(county %in% county_name)
fips_for_county
region_info
megaregions_fips
fips_for_county
library(bigrquery)
library(sf)
library(tidyverse)
library(glue)
library(arcgisbinding)
arc.check_product()
print("Extracting input parameters")
bq_auth(email = 'izzyyoungs@altago.com')
arc.progress_label("Loading libraries")
suppressMessages({
library(sf)
library(tidyverse)
library(bigrquery)
library(glue)
library(arcgisbinding)
})
arc.check_product()
library(sf)
library(tidyverse)
library(bigrquery)
library(glue)
library(arcgisbinding)
arc.check_product()
project_path <- 'N:/Shared/PROJECTS/2024/2024.242 Greensboro, NC SS4A Action Plan/GIS/Data/Project_Data.gdb'
output_path <- 'N:/Shared/PROJECTS/2024/2024.242 Greensboro, NC SS4A Action Plan/GIS/Process/Task 202 Equity Infographics/Equity_Infographics_IY_fixed.gdb'
study_area <- st_read(project_path, layer = 'MPO_Boundary')
equity_area <- st_read(output_path, layer = 'Equity_Focus_Areas')
year <- 2024
quarter <- 4
day <- 'thursday'
email <- 'izzyyoungs@gmail.com'
study_area_sf <- study_area |>
st_transform(4326) |>
st_make_valid() |>
summarize()
equity_area_sf <- equity_area |>
st_transform(4326) |>
st_make_valid() |>
summarize()
equity_area_wkt <- st_as_text(equity_area_sf$geom) |> glue_sql()
equity_area_sf
equity_area_wkt <- st_as_text(equity_area_sf$Shape) |> glue_sql()
equity_area_wkt
study_area_wkt <- st_as_text(study_area_sf$geom) |> glue_sql()
study_area_wkt <- st_as_text(study_area_sf$Shape) |> glue_sql()
study_area_wkt
bq_auth(email = email)
megaregions <- data.frame(
Megaregion = c("alaska", "cal_nev", "cal_nev", "great_lakes", "great_lakes",
"great_lakes", "great_lakes", "great_lakes", "great_lakes",
"hawaii", "mid_atlantic", "mid_atlantic", "mid_atlantic",
"mid_atlantic", "mid_atlantic", "north_atlantic", "north_atlantic",
"north_atlantic", "north_atlantic", "north_atlantic", "north_central",
"north_central", "north_central", "north_central", "north_central",
"north_central", "north_central", "northeast", "northeast",
"northeast", "northeast", "northeast", "northwest", "northwest",
"northwest", "northwest", "northwest", "south_atlantic",
"south_atlantic", "south_atlantic", "south_central", "south_central",
"south_central", "south_central", "south_central", "southwest",
"southwest", "southwest", "southwest", "southwest", "southwest"),
STUSPS = c("AK", "CA", "NV", "IL", "IN", "KY", "MI", "OH", "WI", "HI", "DC",
"MD", "NC", "VA", "WV", "CT", "DE", "NJ", "NY", "PA", "IA", "KS",
"MN", "MO", "ND", "NE", "SD", "MA", "ME", "NH", "RI", "VT", "ID",
"MT", "OR", "WA", "WY", "FL", "GA", "SC", "AL", "AR", "LA", "MS",
"TN", "AZ", "CO", "NM", "OK", "TX", "UT")
)
megaregions_fips <- left_join(tigris::states(cb = TRUE, progress_bar = FALSE), megaregions) |>
suppressMessages()
tigris::states(cb = TRUE, progress_bar = FALSE)
install.packages("tigris")
remotes::install_github("walkerke/tigris")
megaregions_fips <- left_join(tigris::states(cb = TRUE, progress_bar = FALSE, protocol = "ftp"), megaregions) |>
suppressMessages()
uninstall.packages("tigris")
remove.packages("tigris")
remotes::install_github("walkerke/tigris")
library(tigris)
options(tigris_use_cache = TRUE)
tigris::states(cb = TRUE, progress_bar = FALSE, protocol = "ftp")
megaregions_fips <- left_join(tigris::states(cb = TRUE, progress_bar = FALSE, protocol = "ftp"), megaregions) |>
suppressMessages()
library(sf)
library(tidyverse)
library(bigrquery)
library(glue)
library(arcgisbinding)
arc.check_product()
project_path <- 'N:/Shared/PROJECTS/2024/2024.242 Greensboro, NC SS4A Action Plan/GIS/Data/Project_Data.gdb'
output_path <- 'N:/Shared/PROJECTS/2024/2024.242 Greensboro, NC SS4A Action Plan/GIS/Process/Task 202 Equity Infographics/Equity_Infographics_IY_fixed.gdb'
study_area <- st_read(project_path, layer = 'MPO_Boundary')
equity_area <- st_read(output_path, layer = 'Equity_Focus_Areas')
year <- 2024
quarter <- 4
day <- 'thursday'
email <- 'izzyyoungs@gmail.com'
study_area_sf <- study_area |>
st_transform(4326) |>
st_make_valid() |>
summarize()
equity_area_sf <- equity_area |>
st_transform(4326) |>
st_make_valid() |>
summarize()
equity_area_wkt <- st_as_text(equity_area_sf$Shape) |> glue_sql()
study_area_wkt <- st_as_text(study_area_sf$Shape) |> glue_sql()
bq_auth(email = email)
megaregions <- data.frame(
Megaregion = c("alaska", "cal_nev", "cal_nev", "great_lakes", "great_lakes",
"great_lakes", "great_lakes", "great_lakes", "great_lakes",
"hawaii", "mid_atlantic", "mid_atlantic", "mid_atlantic",
"mid_atlantic", "mid_atlantic", "north_atlantic", "north_atlantic",
"north_atlantic", "north_atlantic", "north_atlantic", "north_central",
"north_central", "north_central", "north_central", "north_central",
"north_central", "north_central", "northeast", "northeast",
"northeast", "northeast", "northeast", "northwest", "northwest",
"northwest", "northwest", "northwest", "south_atlantic",
"south_atlantic", "south_atlantic", "south_central", "south_central",
"south_central", "south_central", "south_central", "southwest",
"southwest", "southwest", "southwest", "southwest", "southwest"),
STUSPS = c("AK", "CA", "NV", "IL", "IN", "KY", "MI", "OH", "WI", "HI", "DC",
"MD", "NC", "VA", "WV", "CT", "DE", "NJ", "NY", "PA", "IA", "KS",
"MN", "MO", "ND", "NE", "SD", "MA", "ME", "NH", "RI", "VT", "ID",
"MT", "OR", "WA", "WY", "FL", "GA", "SC", "AL", "AR", "LA", "MS",
"TN", "AZ", "CO", "NM", "OK", "TX", "UT")
)
megaregions_fips <- left_join(tigris::states(cb = TRUE, progress_bar = FALSE, protocol = "ftp"), megaregions) |>
suppressMessages()
fips_for_county <- megaregions_fips |>
st_transform(4326) |>
st_intersection(study_area_sf) |>
st_drop_geometry() |>
slice(1L) |>
suppressMessages() |>
suppressWarnings()
fips_for_county
region <- glue_sql(fips_for_county$Megaregion)
year <- glue_sql(year)
quarter <- glue_sql(quarter)
day <- glue_sql(day)
sql_query <- glue_sql("WITH aoe AS (
SELECT ST_GEOGFROMTEXT('{study_area_wkt}') AS geom
),
equity_areas AS (
SELECT CASE
WHEN '{equity_area_wkt}' = 'None'
THEN NULL
ELSE ST_GEOGFROMTEXT('{equity_area_wkt}')
END AS geom
),
network_links AS (
SELECT n.stableEdgeId, n.streetName, n.speed, n.distance, n.highway, n.flags, n.lanes, n.geometry
FROM `replica-customer.{region}.{region}_2024_{quarter}_network_segments` n
JOIN aoe a ON ST_INTERSECTS(a.geom, n.geometry)
),
base_data AS (
SELECT
stableEdgeId,
CASE
WHEN mode = 'ON_DEMAND_AUTO'  THEN 'tnc'
WHEN mode = 'BIKING'  THEN 'biking'
WHEN mode = 'PRIVATE_AUTO' THEN 'auto'
WHEN mode = 'CARPOOL' THEN 'carpool'
WHEN mode = 'WALKING' THEN 'walking'
WHEN mode = 'PUBLIC_TRANSIT' THEN 'transit'
WHEN mode = 'COMMERCIAL' THEN 'commercial'
ELSE 'other'
END AS v_mode,
CASE
WHEN ea.geom IS NULL THEN '1'
WHEN ST_WITHIN(ST_GEOGPOINT(pop.lng, pop.lat), ea.geom) THEN '1'
ELSE '0'
END AS is_equity_area,
COUNT(*) AS volume
FROM `replica-customer.{region}.{region}_{year}_{quarter}_{day}_trip` AS t
CROSS JOIN UNNEST(network_link_ids) AS stableEdgeId
JOIN network_links AS n ON n.stableEdgeId = stableEdgeId
JOIN `replica-customer.{region}.{region}_{year}_{quarter}_population` pop
ON t.person_id = pop.person_id
CROSS JOIN equity_areas ea
WHERE t.travel_purpose != 'HOME'
GROUP BY stableEdgeId, v_mode, is_equity_area
),
filtered_data AS (
SELECT *
FROM base_data
WHERE is_equity_area = '1'
),
loaded_links AS (
SELECT
stableEdgeId,
IFNULL(volume_auto, 0) AS auto,
IFNULL(volume_tnc, 0) AS tnc,
IFNULL(volume_biking, 0) AS biking,
IFNULL(volume_carpool, 0) AS carpool,
IFNULL(volume_walking, 0) AS walking,
IFNULL(volume_transit, 0) AS transit,
IFNULL(volume_commercial, 0) AS commercial,
IFNULL(volume_other, 0) AS other
FROM filtered_data
PIVOT (
SUM(volume) AS volume
FOR v_mode IN ('auto', 'tnc', 'biking', 'carpool', 'walking', 'transit', 'commercial', 'other')
)
),
loaded_network AS (
SELECT
n.stableEdgeID,
n.streetName,
n.speed,
n.distance,
n.highway,
n.flags,
n.lanes,
n.geometry,
ll.auto,
ll.carpool,
ll.commercial,
ll.tnc,
ll.biking,
ll.walking,
ll.transit,
ll.other
FROM network_links as n
LEFT JOIN loaded_links as ll ON n.stableEdgeId = ll.stableEdgeId
)
SELECT stableEdgeID, streetname, speed, distance, highway, flags, lanes, auto, carpool, commercial, tnc, biking, walking, transit, other, geometry,
FROM loaded_network", .con = DBI::ANSI()) |>
suppressMessages()|>
suppressWarnings()
tb <- bq_project_query("replica-customer", sql_query) |>
suppressMessages() |>
suppressWarnings()
quarter <- 'Q4'
quarter <- glue_sql(quarter)
sql_query <- glue_sql("WITH aoe AS (
SELECT ST_GEOGFROMTEXT('{study_area_wkt}') AS geom
),
equity_areas AS (
SELECT CASE
WHEN '{equity_area_wkt}' = 'None'
THEN NULL
ELSE ST_GEOGFROMTEXT('{equity_area_wkt}')
END AS geom
),
network_links AS (
SELECT n.stableEdgeId, n.streetName, n.speed, n.distance, n.highway, n.flags, n.lanes, n.geometry
FROM `replica-customer.{region}.{region}_2024_{quarter}_network_segments` n
JOIN aoe a ON ST_INTERSECTS(a.geom, n.geometry)
),
base_data AS (
SELECT
stableEdgeId,
CASE
WHEN mode = 'ON_DEMAND_AUTO'  THEN 'tnc'
WHEN mode = 'BIKING'  THEN 'biking'
WHEN mode = 'PRIVATE_AUTO' THEN 'auto'
WHEN mode = 'CARPOOL' THEN 'carpool'
WHEN mode = 'WALKING' THEN 'walking'
WHEN mode = 'PUBLIC_TRANSIT' THEN 'transit'
WHEN mode = 'COMMERCIAL' THEN 'commercial'
ELSE 'other'
END AS v_mode,
CASE
WHEN ea.geom IS NULL THEN '1'
WHEN ST_WITHIN(ST_GEOGPOINT(pop.lng, pop.lat), ea.geom) THEN '1'
ELSE '0'
END AS is_equity_area,
COUNT(*) AS volume
FROM `replica-customer.{region}.{region}_{year}_{quarter}_{day}_trip` AS t
CROSS JOIN UNNEST(network_link_ids) AS stableEdgeId
JOIN network_links AS n ON n.stableEdgeId = stableEdgeId
JOIN `replica-customer.{region}.{region}_{year}_{quarter}_population` pop
ON t.person_id = pop.person_id
CROSS JOIN equity_areas ea
WHERE t.travel_purpose != 'HOME'
GROUP BY stableEdgeId, v_mode, is_equity_area
),
filtered_data AS (
SELECT *
FROM base_data
WHERE is_equity_area = '1'
),
loaded_links AS (
SELECT
stableEdgeId,
IFNULL(volume_auto, 0) AS auto,
IFNULL(volume_tnc, 0) AS tnc,
IFNULL(volume_biking, 0) AS biking,
IFNULL(volume_carpool, 0) AS carpool,
IFNULL(volume_walking, 0) AS walking,
IFNULL(volume_transit, 0) AS transit,
IFNULL(volume_commercial, 0) AS commercial,
IFNULL(volume_other, 0) AS other
FROM filtered_data
PIVOT (
SUM(volume) AS volume
FOR v_mode IN ('auto', 'tnc', 'biking', 'carpool', 'walking', 'transit', 'commercial', 'other')
)
),
loaded_network AS (
SELECT
n.stableEdgeID,
n.streetName,
n.speed,
n.distance,
n.highway,
n.flags,
n.lanes,
n.geometry,
ll.auto,
ll.carpool,
ll.commercial,
ll.tnc,
ll.biking,
ll.walking,
ll.transit,
ll.other
FROM network_links as n
LEFT JOIN loaded_links as ll ON n.stableEdgeId = ll.stableEdgeId
)
SELECT stableEdgeID, streetname, speed, distance, highway, flags, lanes, auto, carpool, commercial, tnc, biking, walking, transit, other, geometry,
FROM loaded_network", .con = DBI::ANSI()) |>
suppressMessages()|>
suppressWarnings()
tb <- bq_project_query("replica-customer", sql_query) |>
suppressMessages() |>
suppressWarnings()
quarter <- 'Q2'
quarter <- glue_sql(quarter)
day <- glue_sql(day)
sql_query <- glue_sql("WITH aoe AS (
SELECT ST_GEOGFROMTEXT('{study_area_wkt}') AS geom
),
equity_areas AS (
SELECT CASE
WHEN '{equity_area_wkt}' = 'None'
THEN NULL
ELSE ST_GEOGFROMTEXT('{equity_area_wkt}')
END AS geom
),
network_links AS (
SELECT n.stableEdgeId, n.streetName, n.speed, n.distance, n.highway, n.flags, n.lanes, n.geometry
FROM `replica-customer.{region}.{region}_2024_{quarter}_network_segments` n
JOIN aoe a ON ST_INTERSECTS(a.geom, n.geometry)
),
base_data AS (
SELECT
stableEdgeId,
CASE
WHEN mode = 'ON_DEMAND_AUTO'  THEN 'tnc'
WHEN mode = 'BIKING'  THEN 'biking'
WHEN mode = 'PRIVATE_AUTO' THEN 'auto'
WHEN mode = 'CARPOOL' THEN 'carpool'
WHEN mode = 'WALKING' THEN 'walking'
WHEN mode = 'PUBLIC_TRANSIT' THEN 'transit'
WHEN mode = 'COMMERCIAL' THEN 'commercial'
ELSE 'other'
END AS v_mode,
CASE
WHEN ea.geom IS NULL THEN '1'
WHEN ST_WITHIN(ST_GEOGPOINT(pop.lng, pop.lat), ea.geom) THEN '1'
ELSE '0'
END AS is_equity_area,
COUNT(*) AS volume
FROM `replica-customer.{region}.{region}_{year}_{quarter}_{day}_trip` AS t
CROSS JOIN UNNEST(network_link_ids) AS stableEdgeId
JOIN network_links AS n ON n.stableEdgeId = stableEdgeId
JOIN `replica-customer.{region}.{region}_{year}_{quarter}_population` pop
ON t.person_id = pop.person_id
CROSS JOIN equity_areas ea
WHERE t.travel_purpose != 'HOME'
GROUP BY stableEdgeId, v_mode, is_equity_area
),
filtered_data AS (
SELECT *
FROM base_data
WHERE is_equity_area = '1'
),
loaded_links AS (
SELECT
stableEdgeId,
IFNULL(volume_auto, 0) AS auto,
IFNULL(volume_tnc, 0) AS tnc,
IFNULL(volume_biking, 0) AS biking,
IFNULL(volume_carpool, 0) AS carpool,
IFNULL(volume_walking, 0) AS walking,
IFNULL(volume_transit, 0) AS transit,
IFNULL(volume_commercial, 0) AS commercial,
IFNULL(volume_other, 0) AS other
FROM filtered_data
PIVOT (
SUM(volume) AS volume
FOR v_mode IN ('auto', 'tnc', 'biking', 'carpool', 'walking', 'transit', 'commercial', 'other')
)
),
loaded_network AS (
SELECT
n.stableEdgeID,
n.streetName,
n.speed,
n.distance,
n.highway,
n.flags,
n.lanes,
n.geometry,
ll.auto,
ll.carpool,
ll.commercial,
ll.tnc,
ll.biking,
ll.walking,
ll.transit,
ll.other
FROM network_links as n
LEFT JOIN loaded_links as ll ON n.stableEdgeId = ll.stableEdgeId
)
SELECT stableEdgeID, streetname, speed, distance, highway, flags, lanes, auto, carpool, commercial, tnc, biking, walking, transit, other, geometry,
FROM loaded_network", .con = DBI::ANSI()) |>
suppressMessages()|>
suppressWarnings()
tb <- bq_project_query("replica-customer", sql_query) |>
suppressMessages() |>
suppressWarnings()
output_path <- file.path(project_path2, 'Network_Dataset_2')
project_path2 <- 'N:/Shared/PROJECTS/2024/2024.242 Greensboro, NC SS4A Action Plan/GIS/Process/Task 202 Equity Infographics/Equity_Infographics_IY_fixed.gdb'
output_path <- file.path(project_path2, 'Network_Dataset_2')
output_path
sf_network
df_network
tb
df_network <- bq_table_download(tb) |>
suppressMessages()|>
suppressWarnings()
sf_network <- st_as_sf(df_network, wkt = 'geometry', crs = 4326) |>
st_filter(study_area_sf) |>
st_make_valid() |>
suppressMessages()|>
suppressWarnings()
sf_network
output_path <- file.path(project_path2, 'Network_Dataset_2')
arc.write(output_path, sf_network, overwrite = TRUE, validate = TRUE) |>
suppressMessages()|>
suppressWarnings()
